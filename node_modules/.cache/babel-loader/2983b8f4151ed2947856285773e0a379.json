{"remainingRequest":"/Users/zhoufan/Vue/learn/9.商城项目/mall/node_modules/babel-loader/lib/index.js!/Users/zhoufan/Vue/learn/9.商城项目/mall/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/zhoufan/Vue/learn/9.商城项目/mall/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhoufan/Vue/learn/9.商城项目/mall/src/components/common/scroll/Scroll.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhoufan/Vue/learn/9.商城项目/mall/src/components/common/scroll/Scroll.vue","mtime":1597566151578},{"path":"/Users/zhoufan/Vue/learn/9.商城项目/mall/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhoufan/Vue/learn/9.商城项目/mall/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhoufan/Vue/learn/9.商城项目/mall/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhoufan/Vue/learn/9.商城项目/mall/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLnRpbWVycyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCmltcG9ydCBCU2Nyb2xsIGZyb20gJ2JldHRlci1zY3JvbGwnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogIlNjcm9sbCIsCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIHNjcm9sbDogbnVsbAogICAgfTsKICB9LAogIHByb3BzOiB7CiAgICAvL+a7muWKqOebkeWQrAogICAgcHJvYmVUeXBlOiB7CiAgICAgIHR5cGU6IE51bWJlciwKICAgICAgImRlZmF1bHQiOiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gMDsKICAgICAgfQogICAgfSwKICAgIHB1bGxVcExvYWQ6IHsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgImRlZmF1bHQiOiBmdW5jdGlvbiBfZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gZmFsc2U7CiAgICAgIH0KICAgIH0KICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICB2YXIgX3RoaXMgPSB0aGlzOwoKICAgIC8q5Y6f5aeLKi8KCiAgICAvKi8v5Yib5bu65a6e5L6LCiAgICAgIHRoaXMuc2Nyb2xsID0gbmV3IEJTY3JvbGwodGhpcy4kcmVmcy53cmFwcGVyLHsKICAgICAgICAvL+m7mOiupOS4umZhbHNl77yM5Lya5a+86Ie0c2Nyb2xs5Lit55qEZGl25aaC5p6c57uR5a6a6L+H54K55Ye75pa55rOV5peg5rOV6KKr54K55Ye7CiAgICAgICAgY2xpY2s6dHJ1ZSwKICAgICAgICAvL+ebkeWQrOa7muWKqOexu+WeiwogICAgICAgIHByb2JlVHlwZTogdGhpcy5wcm9iZVR5cGUsCiAgICAgICAgLy/mu5rliqjliLDlupXpg6gKICAgICAgICBwdWxsVXBMb2FkOiB0aGlzLnB1bGxVcExvYWQsCiAgICAgIH0pOyovCiAgICAvLyDkv53or4HlnKhET03muLLmn5Plrozmr5XlkI7liJ3lp4vljJZiZXR0ZXItc2Nyb2xsCiAgICBzZXRUaW1lb3V0KGZ1bmN0aW9uICgpIHsKICAgICAgX3RoaXMuX2luaXRTY3JvbGwoKTsKICAgIH0sIDIwKTsKICAgIC8qICAgICAvISoKICAgICAgICAgKiDmu5rliqjnm5HlkKzkuovku7YKICAgICAgICAgKiAqIS8KICAgICAgICAgLy/mu5rliqjnm5HlkKwKICAgICAgICAgaWYodGhpcy5wcm9iZVR5cGU9PT0yIHx8IHRoaXMucHJvYmVUeXBlID09PSAzKXsKICAgICAgICAgICB0aGlzLnNjcm9sbC5vbignc2Nyb2xsJywocG9zaXRpb24pPT57CiAgICAgICAgICAgICB0aGlzLiRlbWl0KCdnZXRTY3JvbGxQb3NpdGlvbicscG9zaXRpb24pCiAgICAgICAgICAgfSk7CiAgICAgICAgIH0KICAgICAgICAgLy/kuIrmi4nliqDovb3mm7TlpJrvvIznm5HlkKzmu5rliqjliLDlupXpg6jkuovku7YKICAgICAgICAgaWYodGhpcy5wdWxsVXBMb2FkKXsKICAgICAgICAgICB0aGlzLnNjcm9sbC5vbigncHVsbGluZ1VwJywoKT0+ewogICAgICAgICAgICAgdGhpcy4kZW1pdCgncHVsbFVwJykKICAgICAgICAgICB9KQogICAgICAgICB9Ki8KICB9LAogIG1ldGhvZHM6IHsKICAgIF9pbml0U2Nyb2xsOiBmdW5jdGlvbiBfaW5pdFNjcm9sbCgpIHsKICAgICAgdmFyIF90aGlzMiA9IHRoaXM7CgogICAgICBpZiAoIXRoaXMuJHJlZnMud3JhcHBlcikgewogICAgICAgIHJldHVybjsKICAgICAgfSAvLyBiZXR0ZXItc2Nyb2xs55qE5Yid5aeL5YyWCgoKICAgICAgdGhpcy5zY3JvbGwgPSBuZXcgQlNjcm9sbCh0aGlzLiRyZWZzLndyYXBwZXIsIHsKICAgICAgICBwcm9iZVR5cGU6IHRoaXMucHJvYmVUeXBlLAogICAgICAgIGNsaWNrOiB0cnVlCiAgICAgIH0pOwoKICAgICAgaWYgKHRoaXMucHJvYmVUeXBlID09PSAyIHx8IHRoaXMucHJvYmVUeXBlID09PSAzKSB7CiAgICAgICAgdGhpcy5zY3JvbGwub24oJ3Njcm9sbCcsIGZ1bmN0aW9uIChwb3NpdGlvbikgewogICAgICAgICAgX3RoaXMyLiRlbWl0KCdnZXRTY3JvbGxQb3NpdGlvbicsIHBvc2l0aW9uKTsKICAgICAgICB9KTsKICAgICAgfSAvL+S4iuaLieWKoOi9veabtOWkmu+8jOebkeWQrOa7muWKqOWIsOW6lemDqOS6i+S7tgoKCiAgICAgIGlmICh0aGlzLnB1bGxVcExvYWQpIHsKICAgICAgICB0aGlzLnNjcm9sbC5vbigncHVsbGluZ1VwJywgZnVuY3Rpb24gKCkgewogICAgICAgICAgX3RoaXMyLiRlbWl0KCdwdWxsVXAnKTsKICAgICAgICB9KTsKICAgICAgfQogICAgfSwKCiAgICAvKuWOn+adpeeahCovCiAgICAvL+WbnuWIsOmhtumDqO+8jOaXtumXtOWNleS9jeS4um1zCgogICAgLypzY3JvbGxUbyh4LHksdGltZSA9IDUwMCl7CiAgICAgIHRoaXMuc2Nyb2xsICYmIHRoaXMuc2Nyb2xsLnNjcm9sbFRvKHgseSx0aW1lKQogICAgfSwqLwogICAgLy/lrozmiJDmu5rliqjvvIxzY3JvbGzpu5jorqTlj6rlrozmiJDkuIDmrKHkuIrmi4nliLDlupXpg6gKICAgIGZpbmlzaFB1bGxVcDogZnVuY3Rpb24gZmluaXNoUHVsbFVwKCkgewogICAgICB0aGlzLnNjcm9sbCAmJiB0aGlzLnNjcm9sbC5maW5pc2hQdWxsVXAoKTsKICAgICAgdGhpcy5zY3JvbGwucmVmcmVzaCgpOwogICAgfSwKICAgIC8v5Zu+54mH5Yqg6L295a6M5oiQ5ZCO5Yi35pawc2Nyb2xs77yM6YeN5paw5a6a5LmJ6auY5bqmCiAgICBpbWFnZUxvYWRlZDogZnVuY3Rpb24gaW1hZ2VMb2FkZWQoKSB7CiAgICAgIHRoaXMuc2Nyb2xsICYmIHRoaXMuc2Nyb2xsLnJlZnJlc2goKTsKICAgIH0sCiAgICByZWZyZXNoOiBmdW5jdGlvbiByZWZyZXNoKCkgewogICAgICAvLyDku6PnkIZiZXR0ZXItc2Nyb2xs55qEcmVmcmVzaOaWueazlQogICAgICB0aGlzLnNjcm9sbCAmJiB0aGlzLnNjcm9sbC5yZWZyZXNoKCk7CiAgICB9LAogICAgc2Nyb2xsVG86IGZ1bmN0aW9uIHNjcm9sbFRvKCkgewogICAgICAvLyDku6PnkIZiZXR0ZXItc2Nyb2xs55qEc2Nyb2xsVG/mlrnms5UKICAgICAgdGhpcy5zY3JvbGwgJiYgdGhpcy5zY3JvbGwuc2Nyb2xsVG8uYXBwbHkodGhpcy5zY3JvbGwsIGFyZ3VtZW50cyk7CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["Scroll.vue"],"names":[],"mappings":";;;;;;;;;;AASA,OAAA,OAAA,MAAA,eAAA;AACA,eAAA;AACA,EAAA,IAAA,EAAA,QADA;AAEA,EAAA,IAFA,kBAEA;AACA,WAAA;AACA,MAAA,MAAA,EAAA;AADA,KAAA;AAGA,GANA;AAOA,EAAA,KAAA,EAAA;AACA;AACA,IAAA,SAAA,EAAA;AACA,MAAA,IAAA,EAAA,MADA;AAAA,qCAEA;AACA,eAAA,CAAA;AACA;AAJA,KAFA;AAQA,IAAA,UAAA,EAAA;AACA,MAAA,IAAA,EAAA,OADA;AAAA,qCAEA;AACA,eAAA,KAAA;AACA;AAJA;AARA,GAPA;AAsBA,EAAA,OAtBA,qBAsBA;AAAA;;AACA;;AACA;;;;;;;;;AAUA;AACA,IAAA,UAAA,CAAA,YAAA;AACA,MAAA,KAAA,CAAA,WAAA;AACA,KAFA,EAEA,EAFA,CAAA;AAKA;;;;;;;;;;;;;;;AAeA,GAvDA;AAwDA,EAAA,OAAA,EAAA;AACA,IAAA,WADA,yBACA;AAAA;;AACA,UAAA,CAAA,KAAA,KAAA,CAAA,OAAA,EAAA;AACA;AACA,OAHA,CAIA;;;AACA,WAAA,MAAA,GAAA,IAAA,OAAA,CAAA,KAAA,KAAA,CAAA,OAAA,EAAA;AACA,QAAA,SAAA,EAAA,KAAA,SADA;AAEA,QAAA,KAAA,EAAA;AAFA,OAAA,CAAA;;AAKA,UAAA,KAAA,SAAA,KAAA,CAAA,IAAA,KAAA,SAAA,KAAA,CAAA,EAAA;AACA,aAAA,MAAA,CAAA,EAAA,CAAA,QAAA,EAAA,UAAA,QAAA,EAAA;AACA,UAAA,MAAA,CAAA,KAAA,CAAA,mBAAA,EAAA,QAAA;AACA,SAFA;AAGA,OAdA,CAeA;;;AACA,UAAA,KAAA,UAAA,EAAA;AACA,aAAA,MAAA,CAAA,EAAA,CAAA,WAAA,EAAA,YAAA;AACA,UAAA,MAAA,CAAA,KAAA,CAAA,QAAA;AACA,SAFA;AAGA;AACA,KAtBA;;AA4BA;AAEA;;AACA;;;AAGA;AACA,IAAA,YAnCA,0BAmCA;AACA,WAAA,MAAA,IAAA,KAAA,MAAA,CAAA,YAAA,EAAA;AACA,WAAA,MAAA,CAAA,OAAA;AACA,KAtCA;AAuCA;AACA,IAAA,WAxCA,yBAwCA;AACA,WAAA,MAAA,IAAA,KAAA,MAAA,CAAA,OAAA,EAAA;AACA,KA1CA;AA2CA,IAAA,OA3CA,qBA2CA;AACA;AACA,WAAA,MAAA,IAAA,KAAA,MAAA,CAAA,OAAA,EAAA;AACA,KA9CA;AA+CA,IAAA,QA/CA,sBA+CA;AACA;AACA,WAAA,MAAA,IAAA,KAAA,MAAA,CAAA,QAAA,CAAA,KAAA,CAAA,KAAA,MAAA,EAAA,SAAA,CAAA;AACA;AAlDA;AAxDA,CAAA","sourcesContent":["<template>\n  <div ref=\"wrapper\">\n    <div class=\"content\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<script>\n  import BScroll from 'better-scroll'\n  export default {\n    name: \"Scroll\",\n    data(){\n      return {\n        scroll:null,\n      }\n    },\n    props:{\n      //滚动监听\n      probeType:{\n        type:Number,\n        default(){\n          return 0\n        }\n      },\n      pullUpLoad:{\n        type: Boolean,\n        default() {\n          return false\n        }\n      }\n    },\n    mounted() {\n      /*原始*/\n      /*//创建实例\n        this.scroll = new BScroll(this.$refs.wrapper,{\n          //默认为false，会导致scroll中的div如果绑定过点击方法无法被点击\n          click:true,\n          //监听滚动类型\n          probeType: this.probeType,\n          //滚动到底部\n          pullUpLoad: this.pullUpLoad,\n        });*/\n\n        // 保证在DOM渲染完毕后初始化better-scroll\n        setTimeout(() => {\n          this._initScroll()\n        }, 20)\n\n\n   /*     /!*\n        * 滚动监听事件\n        * *!/\n        //滚动监听\n        if(this.probeType===2 || this.probeType === 3){\n          this.scroll.on('scroll',(position)=>{\n            this.$emit('getScrollPosition',position)\n          });\n        }\n        //上拉加载更多，监听滚动到底部事件\n        if(this.pullUpLoad){\n          this.scroll.on('pullingUp',()=>{\n            this.$emit('pullUp')\n          })\n        }*/\n    },\n    methods:{\n      _initScroll() {\n        if (!this.$refs.wrapper) {\n          return\n        }\n        // better-scroll的初始化\n        this.scroll = new BScroll(this.$refs.wrapper, {\n          probeType: this.probeType,\n          click: true,\n        })\n\n        if(this.probeType===2 || this.probeType === 3){\n          this.scroll.on('scroll',(position)=>{\n            this.$emit('getScrollPosition',position)\n          });\n        }\n        //上拉加载更多，监听滚动到底部事件\n        if(this.pullUpLoad){\n          this.scroll.on('pullingUp',()=>{\n            this.$emit('pullUp')\n          })\n        }\n      },\n\n\n\n\n\n      /*原来的*/\n\n      //回到顶部，时间单位为ms\n      /*scrollTo(x,y,time = 500){\n        this.scroll && this.scroll.scrollTo(x,y,time)\n      },*/\n      //完成滚动，scroll默认只完成一次上拉到底部\n      finishPullUp(){\n        this.scroll && this.scroll.finishPullUp()\n        this.scroll.refresh()\n      },\n      //图片加载完成后刷新scroll，重新定义高度\n      imageLoaded(){\n        this.scroll && this.scroll.refresh()\n      },\n      refresh() {\n        // 代理better-scroll的refresh方法\n        this.scroll && this.scroll.refresh()\n      },\n      scrollTo() {\n        // 代理better-scroll的scrollTo方法\n        this.scroll && this.scroll.scrollTo.apply(this.scroll, arguments)\n      },\n    },\n  }\n</script>\n\n\n<!--<script type=\"text/ecmascript-6\">\n  import BScroll from 'better-scroll'\n\n  export default {\n    props: {\n      /**\n       * 1 滚动的时候会派发scroll事件，会截流。\n       * 2 滚动的时候实时派发scroll事件，不会截流。\n       * 3 除了实时派发scroll事件，在swipe的情况下仍然能实时派发scroll事件\n       */\n      probeType: {\n        type: Number,\n        default: 1\n      },\n      /**\n       * 点击列表是否派发click事件\n       */\n      click: {\n        type: Boolean,\n        default: true\n      },\n      /**\n       * 是否开启横向滚动\n       */\n      scrollX: {\n        type: Boolean,\n        default: false\n      },\n      /**\n       * 是否派发滚动事件\n       */\n      listenScroll: {\n        type: Boolean,\n        default: false\n      },\n      /**\n       * 列表的数据\n       */\n      data: {\n        type: Array,\n        default: null\n      },\n      /**\n       * 是否派发滚动到底部的事件，用于上拉加载\n       */\n      pullUpLoad: {\n        type: Boolean,\n        default: false\n      },\n      /**\n       * 是否派发顶部下拉的事件，用于下拉刷新\n       */\n      pulldown: {\n        type: Boolean,\n        default: false\n      },\n      /**\n       * 是否派发列表滚动开始的事件\n       */\n      beforeScroll: {\n        type: Boolean,\n        default: false\n      },\n      /**\n       * 当数据更新后，刷新scroll的延时。\n       */\n      refreshDelay: {\n        type: Number,\n        default: 20\n      }\n    },\n    mounted() {\n      // 保证在DOM渲染完毕后初始化better-scroll\n      setTimeout(() => {\n        this._initScroll()\n      }, 20)\n    },\n    methods: {\n      _initScroll() {\n        if (!this.$refs.wrapper) {\n          return\n        }\n        // better-scroll的初始化\n        this.scroll = new BScroll(this.$refs.wrapper, {\n          probeType: this.probeType,\n          click: this.click,\n          scrollX: this.scrollX\n        })\n        // 是否派发滚动事件\n        if (this.listenScroll) {\n          this.scroll.on('scroll', (pos) => {\n            this.$emit('scroll', pos)\n          })\n        }\n\n        // 是否派发滚动到底部事件，用于上拉加载\n        if (this.pullUpLoad) {\n          this.scroll.on('scrollEnd', () => {\n            // 滚动到底部\n            if (this.scroll.y <= (this.scroll.maxScrollY + 50)) {\n              this.$emit('pullUp')\n            }\n          })\n        }\n\n        // 是否派发顶部下拉事件，用于下拉刷新\n        if (this.pulldown) {\n          this.scroll.on('touchend', (pos) => {\n            // 下拉动作\n            if (pos.y > 50) {\n              this.$emit('pulldown')\n            }\n          })\n        }\n\n        // 是否派发列表滚动开始的事件\n        if (this.beforeScroll) {\n          this.scroll.on('beforeScrollStart', () => {\n            this.$emit('beforeScroll')\n          })\n        }\n      },\n      disable() {\n        // 代理better-scroll的disable方法\n        this.scroll && this.scroll.disable()\n      },\n      enable() {\n        // 代理better-scroll的enable方法\n        this.scroll && this.scroll.enable()\n      },\n      refresh() {\n        // 代理better-scroll的refresh方法\n        this.scroll && this.scroll.refresh()\n      },\n      scrollTo() {\n        // 代理better-scroll的scrollTo方法\n        this.scroll && this.scroll.scrollTo.apply(this.scroll, arguments)\n      },\n      scrollToElement() {\n        // 代理better-scroll的scrollToElement方法\n        this.scroll && this.scroll.scrollToElement.apply(this.scroll, arguments)\n      }\n    },\n    watch: {\n      // 监听数据的变化，延时refreshDelay时间后调用refresh方法重新计算，保证滚动效果正常\n      data() {\n        setTimeout(() => {\n          this.refresh()\n        }, this.refreshDelay)\n      }\n    }\n  }\n</script>-->\n\n<style scoped>\n</style>\n"],"sourceRoot":"src/components/common/scroll"}]}