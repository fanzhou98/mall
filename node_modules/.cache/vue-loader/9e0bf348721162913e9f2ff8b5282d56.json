{"remainingRequest":"/Users/zhoufan/Vue/learn/9.商城项目/mall/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/zhoufan/Vue/learn/9.商城项目/mall/src/components/common/scroll/Scroll.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/zhoufan/Vue/learn/9.商城项目/mall/src/components/common/scroll/Scroll.vue","mtime":1597464305657},{"path":"/Users/zhoufan/Vue/learn/9.商城项目/mall/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhoufan/Vue/learn/9.商城项目/mall/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/zhoufan/Vue/learn/9.商城项目/mall/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/zhoufan/Vue/learn/9.商城项目/mall/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBCU2Nyb2xsIGZyb20gJ2JldHRlci1zY3JvbGwnCmV4cG9ydCBkZWZhdWx0IHsKICBuYW1lOiAiU2Nyb2xsIiwKICBkYXRhKCl7CiAgICByZXR1cm4gewogICAgICBzY3JvbGw6bnVsbCwKICAgIH0KICB9LAogIHByb3BzOnsKICAgIC8v5rua5Yqo55uR5ZCsCiAgICBwcm9iZVR5cGU6ewogICAgICB0eXBlOk51bWJlciwKICAgICAgZGVmYXVsdCgpewogICAgICAgIHJldHVybiAwCiAgICAgIH0KICAgIH0sCiAgICBwdWxsVXBMb2FkOnsKICAgICAgdHlwZTogQm9vbGVhbiwKICAgICAgZGVmYXVsdCgpIHsKICAgICAgICByZXR1cm4gZmFsc2UKICAgICAgfQogICAgfQogIH0sCiAgbW91bnRlZCgpIHsKICAgIC8q5Y6f5aeLKi8KICAgIC8qLy/liJvlu7rlrp7kvosKICAgICAgdGhpcy5zY3JvbGwgPSBuZXcgQlNjcm9sbCh0aGlzLiRyZWZzLndyYXBwZXIsewogICAgICAgIC8v6buY6K6k5Li6ZmFsc2XvvIzkvJrlr7zoh7RzY3JvbGzkuK3nmoRkaXblpoLmnpznu5Hlrprov4fngrnlh7vmlrnms5Xml6Dms5Xooqvngrnlh7sKICAgICAgICBjbGljazp0cnVlLAogICAgICAgIC8v55uR5ZCs5rua5Yqo57G75Z6LCiAgICAgICAgcHJvYmVUeXBlOiB0aGlzLnByb2JlVHlwZSwKICAgICAgICAvL+a7muWKqOWIsOW6lemDqAogICAgICAgIHB1bGxVcExvYWQ6IHRoaXMucHVsbFVwTG9hZCwKICAgICAgfSk7Ki8KCiAgICAgIC8vIOS/neivgeWcqERPTea4suafk+WujOavleWQjuWIneWni+WMlmJldHRlci1zY3JvbGwKICAgICAgc2V0VGltZW91dCgoKSA9PiB7CiAgICAgICAgdGhpcy5faW5pdFNjcm9sbCgpCiAgICAgIH0sIDIwKQoKCiAvKiAgICAgLyEqCiAgICAgICog5rua5Yqo55uR5ZCs5LqL5Lu2CiAgICAgICogKiEvCiAgICAgIC8v5rua5Yqo55uR5ZCsCiAgICAgIGlmKHRoaXMucHJvYmVUeXBlPT09MiB8fCB0aGlzLnByb2JlVHlwZSA9PT0gMyl7CiAgICAgICAgdGhpcy5zY3JvbGwub24oJ3Njcm9sbCcsKHBvc2l0aW9uKT0+ewogICAgICAgICAgdGhpcy4kZW1pdCgnZ2V0U2Nyb2xsUG9zaXRpb24nLHBvc2l0aW9uKQogICAgICAgIH0pOwogICAgICB9CiAgICAgIC8v5LiK5ouJ5Yqg6L295pu05aSa77yM55uR5ZCs5rua5Yqo5Yiw5bqV6YOo5LqL5Lu2CiAgICAgIGlmKHRoaXMucHVsbFVwTG9hZCl7CiAgICAgICAgdGhpcy5zY3JvbGwub24oJ3B1bGxpbmdVcCcsKCk9PnsKICAgICAgICAgIHRoaXMuJGVtaXQoJ3B1bGxVcCcpCiAgICAgICAgfSkKICAgICAgfSovCiAgfSwKICBtZXRob2RzOnsKICAgIF9pbml0U2Nyb2xsKCkgewogICAgICBpZiAoIXRoaXMuJHJlZnMud3JhcHBlcikgewogICAgICAgIHJldHVybgogICAgICB9CiAgICAgIC8vIGJldHRlci1zY3JvbGznmoTliJ3lp4vljJYKICAgICAgdGhpcy5zY3JvbGwgPSBuZXcgQlNjcm9sbCh0aGlzLiRyZWZzLndyYXBwZXIsIHsKICAgICAgICBwcm9iZVR5cGU6IHRoaXMucHJvYmVUeXBlLAogICAgICAgIGNsaWNrOiB0cnVlLAogICAgICB9KQoKICAgICAgaWYodGhpcy5wcm9iZVR5cGU9PT0yIHx8IHRoaXMucHJvYmVUeXBlID09PSAzKXsKICAgICAgICB0aGlzLnNjcm9sbC5vbignc2Nyb2xsJywocG9zaXRpb24pPT57CiAgICAgICAgICB0aGlzLiRlbWl0KCdnZXRTY3JvbGxQb3NpdGlvbicscG9zaXRpb24pCiAgICAgICAgfSk7CiAgICAgIH0KICAgICAgLy/kuIrmi4nliqDovb3mm7TlpJrvvIznm5HlkKzmu5rliqjliLDlupXpg6jkuovku7YKICAgICAgaWYodGhpcy5wdWxsVXBMb2FkKXsKICAgICAgICB0aGlzLnNjcm9sbC5vbigncHVsbGluZ1VwJywoKT0+ewogICAgICAgICAgdGhpcy4kZW1pdCgncHVsbFVwJykKICAgICAgICB9KQogICAgICB9CiAgICB9LAoKCgoKCiAgICAvKuWOn+adpeeahCovCgogICAgLy/lm57liLDpobbpg6jvvIzml7bpl7TljZXkvY3kuLptcwogICAgLypzY3JvbGxUbyh4LHksdGltZSA9IDUwMCl7CiAgICAgIHRoaXMuc2Nyb2xsICYmIHRoaXMuc2Nyb2xsLnNjcm9sbFRvKHgseSx0aW1lKQogICAgfSwqLwogICAgLy/lrozmiJDmu5rliqjvvIxzY3JvbGzpu5jorqTlj6rlrozmiJDkuIDmrKHkuIrmi4nliLDlupXpg6gKICAgIGZpbmlzaFB1bGxVcCgpewogICAgICB0aGlzLnNjcm9sbCAmJiB0aGlzLnNjcm9sbC5maW5pc2hQdWxsVXAoKQogICAgICB0aGlzLnNjcm9sbC5yZWZyZXNoKCkKICAgIH0sCiAgICAvL+WbvueJh+WKoOi9veWujOaIkOWQjuWIt+aWsHNjcm9sbO+8jOmHjeaWsOWumuS5iemrmOW6pgogICAgaW1hZ2VMb2FkZWQoKXsKICAgICAgdGhpcy5zY3JvbGwgJiYgdGhpcy5zY3JvbGwucmVmcmVzaCgpCiAgICB9LAogICAgcmVmcmVzaCgpIHsKICAgICAgLy8g5Luj55CGYmV0dGVyLXNjcm9sbOeahHJlZnJlc2jmlrnms5UKICAgICAgdGhpcy5zY3JvbGwgJiYgdGhpcy5zY3JvbGwucmVmcmVzaCgpCiAgICB9LAogICAgc2Nyb2xsVG8oKSB7CiAgICAgIC8vIOS7o+eQhmJldHRlci1zY3JvbGznmoRzY3JvbGxUb+aWueazlQogICAgICB0aGlzLnNjcm9sbCAmJiB0aGlzLnNjcm9sbC5zY3JvbGxUby5hcHBseSh0aGlzLnNjcm9sbCwgYXJndW1lbnRzKQogICAgfSwKICB9LAogIHdhdGNoOiB7CiAgICAvLyDnm5HlkKzmlbDmja7nmoTlj5jljJbvvIzlu7bml7ZyZWZyZXNoRGVsYXnml7bpl7TlkI7osIPnlKhyZWZyZXNo5pa55rOV6YeN5paw6K6h566X77yM5L+d6K+B5rua5Yqo5pWI5p6c5q2j5bi4CiAgICBkYXRhKCkgewogICAgICBzZXRUaW1lb3V0KCgpID0+IHsKICAgICAgICB0aGlzLnJlZnJlc2goKQogICAgICB9LCB0aGlzLnJlZnJlc2hEZWxheSkKICAgIH0KICB9Cn0K"},{"version":3,"sources":["Scroll.vue"],"names":[],"mappings":";;;;;;;;;AASA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;AAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Scroll.vue","sourceRoot":"src/components/common/scroll","sourcesContent":["<template>\n  <div ref=\"wrapper\">\n    <div class=\"content\">\n      <slot></slot>\n    </div>\n  </div>\n</template>\n\n<script>\n  import BScroll from 'better-scroll'\n  export default {\n    name: \"Scroll\",\n    data(){\n      return {\n        scroll:null,\n      }\n    },\n    props:{\n      //滚动监听\n      probeType:{\n        type:Number,\n        default(){\n          return 0\n        }\n      },\n      pullUpLoad:{\n        type: Boolean,\n        default() {\n          return false\n        }\n      }\n    },\n    mounted() {\n      /*原始*/\n      /*//创建实例\n        this.scroll = new BScroll(this.$refs.wrapper,{\n          //默认为false，会导致scroll中的div如果绑定过点击方法无法被点击\n          click:true,\n          //监听滚动类型\n          probeType: this.probeType,\n          //滚动到底部\n          pullUpLoad: this.pullUpLoad,\n        });*/\n\n        // 保证在DOM渲染完毕后初始化better-scroll\n        setTimeout(() => {\n          this._initScroll()\n        }, 20)\n\n\n   /*     /!*\n        * 滚动监听事件\n        * *!/\n        //滚动监听\n        if(this.probeType===2 || this.probeType === 3){\n          this.scroll.on('scroll',(position)=>{\n            this.$emit('getScrollPosition',position)\n          });\n        }\n        //上拉加载更多，监听滚动到底部事件\n        if(this.pullUpLoad){\n          this.scroll.on('pullingUp',()=>{\n            this.$emit('pullUp')\n          })\n        }*/\n    },\n    methods:{\n      _initScroll() {\n        if (!this.$refs.wrapper) {\n          return\n        }\n        // better-scroll的初始化\n        this.scroll = new BScroll(this.$refs.wrapper, {\n          probeType: this.probeType,\n          click: true,\n        })\n\n        if(this.probeType===2 || this.probeType === 3){\n          this.scroll.on('scroll',(position)=>{\n            this.$emit('getScrollPosition',position)\n          });\n        }\n        //上拉加载更多，监听滚动到底部事件\n        if(this.pullUpLoad){\n          this.scroll.on('pullingUp',()=>{\n            this.$emit('pullUp')\n          })\n        }\n      },\n\n\n\n\n\n      /*原来的*/\n\n      //回到顶部，时间单位为ms\n      /*scrollTo(x,y,time = 500){\n        this.scroll && this.scroll.scrollTo(x,y,time)\n      },*/\n      //完成滚动，scroll默认只完成一次上拉到底部\n      finishPullUp(){\n        this.scroll && this.scroll.finishPullUp()\n        this.scroll.refresh()\n      },\n      //图片加载完成后刷新scroll，重新定义高度\n      imageLoaded(){\n        this.scroll && this.scroll.refresh()\n      },\n      refresh() {\n        // 代理better-scroll的refresh方法\n        this.scroll && this.scroll.refresh()\n      },\n      scrollTo() {\n        // 代理better-scroll的scrollTo方法\n        this.scroll && this.scroll.scrollTo.apply(this.scroll, arguments)\n      },\n    },\n    watch: {\n      // 监听数据的变化，延时refreshDelay时间后调用refresh方法重新计算，保证滚动效果正常\n      data() {\n        setTimeout(() => {\n          this.refresh()\n        }, this.refreshDelay)\n      }\n    }\n  }\n</script>\n\n\n<!--<script type=\"text/ecmascript-6\">\n  import BScroll from 'better-scroll'\n\n  export default {\n    props: {\n      /**\n       * 1 滚动的时候会派发scroll事件，会截流。\n       * 2 滚动的时候实时派发scroll事件，不会截流。\n       * 3 除了实时派发scroll事件，在swipe的情况下仍然能实时派发scroll事件\n       */\n      probeType: {\n        type: Number,\n        default: 1\n      },\n      /**\n       * 点击列表是否派发click事件\n       */\n      click: {\n        type: Boolean,\n        default: true\n      },\n      /**\n       * 是否开启横向滚动\n       */\n      scrollX: {\n        type: Boolean,\n        default: false\n      },\n      /**\n       * 是否派发滚动事件\n       */\n      listenScroll: {\n        type: Boolean,\n        default: false\n      },\n      /**\n       * 列表的数据\n       */\n      data: {\n        type: Array,\n        default: null\n      },\n      /**\n       * 是否派发滚动到底部的事件，用于上拉加载\n       */\n      pullUpLoad: {\n        type: Boolean,\n        default: false\n      },\n      /**\n       * 是否派发顶部下拉的事件，用于下拉刷新\n       */\n      pulldown: {\n        type: Boolean,\n        default: false\n      },\n      /**\n       * 是否派发列表滚动开始的事件\n       */\n      beforeScroll: {\n        type: Boolean,\n        default: false\n      },\n      /**\n       * 当数据更新后，刷新scroll的延时。\n       */\n      refreshDelay: {\n        type: Number,\n        default: 20\n      }\n    },\n    mounted() {\n      // 保证在DOM渲染完毕后初始化better-scroll\n      setTimeout(() => {\n        this._initScroll()\n      }, 20)\n    },\n    methods: {\n      _initScroll() {\n        if (!this.$refs.wrapper) {\n          return\n        }\n        // better-scroll的初始化\n        this.scroll = new BScroll(this.$refs.wrapper, {\n          probeType: this.probeType,\n          click: this.click,\n          scrollX: this.scrollX\n        })\n        // 是否派发滚动事件\n        if (this.listenScroll) {\n          this.scroll.on('scroll', (pos) => {\n            this.$emit('scroll', pos)\n          })\n        }\n\n        // 是否派发滚动到底部事件，用于上拉加载\n        if (this.pullUpLoad) {\n          this.scroll.on('scrollEnd', () => {\n            // 滚动到底部\n            if (this.scroll.y <= (this.scroll.maxScrollY + 50)) {\n              this.$emit('pullUp')\n            }\n          })\n        }\n\n        // 是否派发顶部下拉事件，用于下拉刷新\n        if (this.pulldown) {\n          this.scroll.on('touchend', (pos) => {\n            // 下拉动作\n            if (pos.y > 50) {\n              this.$emit('pulldown')\n            }\n          })\n        }\n\n        // 是否派发列表滚动开始的事件\n        if (this.beforeScroll) {\n          this.scroll.on('beforeScrollStart', () => {\n            this.$emit('beforeScroll')\n          })\n        }\n      },\n      disable() {\n        // 代理better-scroll的disable方法\n        this.scroll && this.scroll.disable()\n      },\n      enable() {\n        // 代理better-scroll的enable方法\n        this.scroll && this.scroll.enable()\n      },\n      refresh() {\n        // 代理better-scroll的refresh方法\n        this.scroll && this.scroll.refresh()\n      },\n      scrollTo() {\n        // 代理better-scroll的scrollTo方法\n        this.scroll && this.scroll.scrollTo.apply(this.scroll, arguments)\n      },\n      scrollToElement() {\n        // 代理better-scroll的scrollToElement方法\n        this.scroll && this.scroll.scrollToElement.apply(this.scroll, arguments)\n      }\n    },\n    watch: {\n      // 监听数据的变化，延时refreshDelay时间后调用refresh方法重新计算，保证滚动效果正常\n      data() {\n        setTimeout(() => {\n          this.refresh()\n        }, this.refreshDelay)\n      }\n    }\n  }\n</script>-->\n\n<style scoped>\n</style>\n"]}]}